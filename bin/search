#!/usr/bin/env python3

import requests
import re
import json
import os
import sys

import glob
from PIL import Image
from os.path import basename, dirname


def search(keywords):
    url = "https://duckduckgo.com/"

    params = {"q": keywords}

    print("Hitting DuckDuckGo for Token")

    #   First make a request to above URL, and parse out the 'vqd'
    #   This is a special token, which should be used in the subsequent request
    res = requests.post(url, data=params)
    searchObj = re.search(r"vqd=([\d-]+)\&", res.text, re.M | re.I)

    if not searchObj:
        print("Token Parsing Failed !")
        return -1

    print("Obtained Token")

    headers = {
        "dnt": "1",
        "accept-encoding": "deflate",
        "x-requested-with": "XMLHttpRequest",
        "accept-language": "en-GB,en-US;q=0.8,en;q=0.6,ms;q=0.4",
        "user-agent": "Mozilla/5.0 (X11; Linux x86_64)",
        "accept": "application/json, text/javascript, */*; q=0.01",
        "referer": "https://duckduckgo.com/",
        "authority": "duckduckgo.com",
    }

    params = (
        ("l", "wt-wt"),
        ("o", "json"),
        ("q", keywords),
        ("vqd", searchObj.group(1)),
        ("f", ",,,"),
        ("p", "2"),
    )

    requestUrl = url + "i.js"

    try:
        res = requests.get(requestUrl, headers=headers, params=params)
        data = json.loads(res.text)
        saveImage(data["results"], keywords)
    except ValueError:
        print("Please try later.")

    # logger.debug("Hitting Url Success : %s", requestUrl)


def saveImage(objs, keyword, limit=5):
    s = 0
    for k, obj in enumerate(objs):
        img_link = obj["thumbnail"]
        img_data = requests.get(img_link).content

        try:
            os.mkdir('images')
        except FileExistsError:
            pass

        filename = "images/" + keyword + "-" + str(k) + ".png"
        with open(filename, "wb+") as f:
            f.write(img_data)

        s += 1

        print("File " + keyword + ".png successfully downloaded.")
        if s > limit:
            break


def help():
    return """Example Usage:

    search cleanup           : cleanup names and make thumbnails.
    search term              : run search for the term
    search term --cartoons   : same as above, but no cartoons.
    """


def __main__():

    if len(sys.argv) == 1:
        print(help())
        exit("exit")

    if sys.argv[1] == "cleanup":
        return cleanup()

    is_cartoon = "--cartoon" not in sys.argv[1:]
    term = " ".join([x for x in sys.argv[1:] if x != "--cartoon"])
    term = term if not is_cartoon else ("%s cartoon" % term)
    search(term)


def cleanup():
    try:
        os.mkdir('images/thumbs/')
    except FileExistsError:
        pass

    for image in glob.glob("images/*.png"):

        if re.match(r"(.*?)-(\d{1,}).png", image):
            new_name = image.replace("cartoon", "")
            new_name = re.sub(r"-(\d{1,}).png", ".png", new_name)
            new_name = re.sub(r"(\s{2,})", " ", new_name)
            new_name = re.sub(r"(\s{2,})", " ", new_name)
            new_name = new_name.replace(" .", ".")
            new_name = new_name.replace(" ", "_")
            print(image, "=>", new_name)

            im = Image.open(image)
            im.thumbnail((500, 500))
            im.save(new_name.replace("images/", "images/thumbs/").replace("png", "jpg"), "JPEG")


if __name__ == "__main__":
    __main__()

    # print(sys.argv[1])

    # search(sys.argv[-1])
